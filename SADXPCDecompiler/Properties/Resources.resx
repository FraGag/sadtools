<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DirectoryNotFoundForOutputDirectory" xml:space="preserve">
    <value>The output directory could not be found.</value>
  </data>
  <data name="DirectoryOfOutputFileNotFound" xml:space="preserve">
    <value>The directory that should contain an output file was not found.</value>
  </data>
  <data name="InvalidAddress" xml:space="preserve">
    <value>A &lt;Rename&gt; element has an invalid Address attribute: "{0}". The Address attribute must be a string of one to eight hexadecimal characters.</value>
  </data>
  <data name="InvalidPathForModuleDescription" xml:space="preserve">
    <value>The path for the module description file is invalid.</value>
  </data>
  <data name="InvalidPathForOutputDirectory" xml:space="preserve">
    <value>The path for the output directory or a subdirectory thereof is invalid.</value>
  </data>
  <data name="InvalidPathForOutputFile" xml:space="preserve">
    <value>The path for an output file is invalid.</value>
  </data>
  <data name="InvalidPathForSourceModule" xml:space="preserve">
    <value>The path for the source module file is invalid.</value>
  </data>
  <data name="IOErrorForOutputFile" xml:space="preserve">
    <value>An I/O error occurred while trying to create an output file.</value>
  </data>
  <data name="IOErrorWhileWritingInOutputFile" xml:space="preserve">
    <value>An I/O error occurred while trying to write in an output file.</value>
  </data>
  <data name="MissingExport" xml:space="preserve">
    <value>The source module doesn't export "{0}".</value>
  </data>
  <data name="ModuleDescriptionFileNotFound" xml:space="preserve">
    <value>The module description file was not found.</value>
  </data>
  <data name="PathTooLongForModuleDescription" xml:space="preserve">
    <value>The path for the module description file is too long.</value>
  </data>
  <data name="PathTooLongForOutputDirectory" xml:space="preserve">
    <value>The path for the output directory or a subdirectory thereof is too long.</value>
  </data>
  <data name="PathTooLongForOutputFile" xml:space="preserve">
    <value>The path for an output file is too long.</value>
  </data>
  <data name="PathTooLongForSourceModule" xml:space="preserve">
    <value>The path for the source module file is too long.</value>
  </data>
  <data name="SourceModuleFileNotFound" xml:space="preserve">
    <value>The source module file was not found.</value>
  </data>
  <data name="UnauthorizedAccessToModuleDescription" xml:space="preserve">
    <value>Access to the module description file was denied, or the specified path is a directory.</value>
  </data>
  <data name="UnauthorizedAccessToOutputDirectory" xml:space="preserve">
    <value>Access to the output directory or a subdirectory thereof was denied.</value>
  </data>
  <data name="UnauthorizedAccessToOutputFile" xml:space="preserve">
    <value>Access to an output file was denied, or the specified path is a directory.</value>
  </data>
  <data name="UnauthorizedAccessToSourceModule" xml:space="preserve">
    <value>Access to the source module file was denied, or the specified path is a directory.</value>
  </data>
  <data name="UnknownExportChild" xml:space="preserve">
    <value>An &lt;Export&gt; element has an unknown child element.</value>
  </data>
  <data name="UnknownObject" xml:space="preserve">
    <value>The &lt;Rename&gt; element referring to address "{0:X8}" doesn't point to a known object.</value>
  </data>
  <data name="AddressDoesNotReferToAttach" xml:space="preserve">
    <value>Address "{0:X8}" does not refer to an ATTACH structure.</value>
  </data>
</root>